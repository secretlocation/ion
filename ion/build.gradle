buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
    }
}

configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-v4:27.1.0'
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
}

apply plugin: 'com.android.library'

dependencies {
    implementation 'com.android.support:support-v4:+'
    implementation project(':AndroidAsync:AndroidAsync')
    implementation 'com.google.code.gson:gson:2.3'
    // Use play services if the linking app is using it. When play services isn't available
    // ConscryptMiddleware will throw ClassNotFoundErrors upon attempting to load it at runtime.
    // Conscrypt will fail to load, and the system SSL stack will be used.
    // "provided" means the library is provided by the platform. Typically this is used for
    // actual platform libraries like framework.jar. But this is a clever way of having a soft
    // dependency to play services.
    compileOnly 'com.google.android.gms:play-services-base:10.+'
    // for when i wanna test this against gms conscrypt
    androidTestImplementation 'com.google.android.gms:play-services-base:10.+'
    // mockito nom nom oh god im drunk
    androidTestImplementation 'org.mockito:mockito-core:1.+'
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
}

android {
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'

            java {
                srcDir 'src/'
            }
        }
        androidTest.java.srcDirs=['test/src/']
        androidTest.res.srcDirs=['test/res/']
        androidTest.assets.srcDirs=['test/assets/']
    }

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        targetSdkVersion 23
        minSdkVersion 14
    }

    compileSdkVersion 27
    buildToolsVersion '28.0.3'
}

// upload to maven task
if (System.getenv().I_AM_KOUSH == 'true') {
    apply from: 'https://raw.githubusercontent.com/koush/mvn-repo/master/maven.gradle'

    apply plugin: 'maven'
    apply plugin: 'signing'

    afterEvaluate { project ->
        uploadArchives {
            repositories {
                mavenDeployer {
                    pom*.whenConfigured { pom ->
                        pom.dependencies.removeAll { dep -> dep.artifactId == 'support-v4' }
                    }
                }
            }
        }
    }
}
